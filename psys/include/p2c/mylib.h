/* Header for module mylib, generated by p2c */
#ifndef MYLIB_H
#define MYLIB_H

//  #include <X11/Xlib.h>

#ifdef MYLIB_G
# define vextern
#else
# define vextern extern
#endif



typedef uchar m_colorarray[17];

typedef uchar m_vcolorarray[1000001L];

typedef long m_pointarray[10];

typedef uchar m_screenvararr[199680L];

typedef uchar m_packedscreenvararr[99840L];

typedef uchar m_picturevararr[];

typedef long m_chpicarr[32];

typedef struct m_chpicrec {
    int xsize : 8, ysize : 8, xoff : 8, yoff : 8;
/* p2c: Note: Must assume this bit field is signed (from mylib.imp, line 53) */
    unsigned xdim : 8, ydim : 8, width : 8, height : 8;
    m_chpicarr pic;
} m_chpicrec;

typedef struct m_fchpic {
    uchar ch, junk;
    m_chpicrec pic;
} m_fchpic;

typedef m_chpicrec *m_chfontarr[256];

typedef uchar m_cchpicarr[32][32];

typedef struct m_cchpicrec {
    int xsize : 8, ysize : 8, xoff : 8, yoff : 8;
/* p2c: Note: Must assume this bit field is signed (from mylib.imp, line 53) */
    unsigned xdim : 8, ydim : 8, width : 8, height : 8;
    m_cchpicarr pic;
} m_cchpicrec;

typedef struct m_fcchpic {
    uchar ch, junk;
    m_cchpicrec pic;
} m_fcchpic;

typedef m_cchpicrec *m_cchfontarr[256];

typedef struct m_tablet_info {
    long x, y;
    short phx, phy, fill1;
    int ax : 8, ay : 8;
/* p2c: Note: Must assume this bit field is signed (from mylib.imp, line 53) */
    unsigned menu : 8, depressed : 1, near_ : 1, dn : 1, up : 1, off : 1, clip : 1,
             moving : 1, inalpha : 1;
} m_tablet_info;



#define m_black         0
#define m_red           1
#define m_green         2
#define m_yellow        3
#define m_blue          4
#define m_purple        5
#define m_cyan          6
#define m_white         7
#define m_xblack        16
#define m_xred          17
#define m_xgreen        18
#define m_xyellow       19
#define m_xblue         12
#define m_xpurple       21
#define m_xcyan         22
#define m_xwhite        23
#define m_normal        0
#define m_xor           16
#define m_over          32
#define m_mask          48
#define m_add           64
#define m_sub           80
#define m_user          96

#define m_scan          0xf8f8L
#define m_erase         0xf9f9L
#define m_hitdet        0xfafaL
#define m_chg           0xfbfbL
#define m_chgtab        0xfcfcL
#define m_pat           0xfdfdL
#define m_fastu         0xfefeL
#define m_trans         0xffffL

#define m_mode          256
#define m_rule_erase    0
#define m_rule_and      1
#define m_rule_normal   3
#define m_rule_mask     4
#define m_rule_trans    5
#define m_rule_xor      6
#define m_rule_over     7
#define m_rule_not      10
#define m_rule_inv      12
#define m_rule_ones     15
#define m_pie           1
#define m_chord         2
#define m_extarc        3



vextern _PROCEDURE m_usercolor[16];
vextern _PROCEDURE m_fastusercolor;
vextern uchar m_chgfrom, m_chgto;
vextern m_colorarray m_chgtable;
vextern boolean m_blackflag;
vextern long m_hitcount, m_across, m_down;
#define m_machine "X"
/*   vextern uchar m_machine[20];  */
vextern long m_maxcolor, m_scanmask;
vextern int *m_display;
vextern int m_window;
vextern int m_initialized;
vextern int BlackAndWhite;
vextern int screennum;

#define ColorsInSet           16
#define ColorSets              4
extern int m_colors[ColorSets+1][ColorsInSet];

/* Added X display name support.  stafford 7/17/91 */
extern void m_set_display_name(char* display_name);
extern char m_display_name[];
extern boolean m_autoraise;

extern void m_init_screen();
extern void m_init_colors();
extern void m_init_pen();
extern void m_init_graphics();
extern void m_init_graphics_nopen();
extern void m_init_dzg();
extern void m_modern();
extern void m_version();
extern long m_curversion();
extern void m_setplanes();
extern long m_seeplanes();
extern void m_clear();
extern void m_clearwindow();
extern void m_vsync();
extern void m_clip();
extern void m_noclip();
extern void m_unclip();
extern void m_transform();
extern void m_upside_down();
extern void m_rotscale();
extern void m_rotscaled();
extern void m_notransform();
extern void m_untransform();
extern void m_cursor();
extern void m_nocursor();
extern void m_setcursor();
extern void m_setcursorshape();
extern void m_choosecursor();
extern void m_seecursor();
extern void m_color();
extern void m_colormode();
extern void m_uncolor();
extern long m_curcolor();
extern long m_curcolormode();
extern void m_setpattern();
extern void m_seepattern();
extern void m_scanpos();
extern void m_setcolor();
extern void m_seecolor();
extern void m_setcolors();
extern void m_seecolors();
extern void m_vsetcolors();
extern void m_vseecolors();
extern void m_choosecolors();
extern void m_nullusercolor();
extern void m_pixelpos();
extern void m_pixelptr();
extern void m_nullfastusercolor();
extern void m_linestyle();
extern void m_nolinestyle();
extern void m_unlinestyle();
extern long m_curlinestyle();
extern void m_setlinestyle();
extern void m_seelinestyle();
extern void m_linewidth();
extern void m_nolinewidth();
extern void m_unlinewidth();
extern void m_move();
extern void m_moverel();
extern void m_move2();
extern void m_moverel2();
extern void m_draw();
extern void m_drawrel();
extern void m_seeposn();
extern void m_drawline();
extern void m_drawrect();
extern void m_fillrect();
extern void m_grid();
extern void m_drawpoint();
extern long m_seepoint();
extern void m_scanrect();
extern void m_crt_out();
extern void m_circle();
extern void m_ellipse();
extern void m_drawarc();
extern void m_fillarc();
extern void m_computearc3();
extern void m_drawarc3();
extern void m_fillarc3();
extern void m_computearct();
extern void m_drawarct();
extern void m_fillarct();
extern void m_roundrect();
extern void m_bezier();
extern void m_bezier2();
extern void m_cbezier();
extern void m_polycurve();
extern void m_drawarrow();
extern void m_fillarrow();
extern void m_drawpoly();
extern void m_fillpoly();
extern void m_floodfill();
extern void m_boundaryfill();
extern void m_areafill();
extern void m_colorrect();
extern void m_movescreen();
extern void m_swapscreen();
extern void m_packscreen();
extern void m_unpackscreen();
extern void m_setscreen();
extern void m_seescreen();
extern void m_getpicture();
extern void m_getpicture2();
extern void m_putpicture();
extern void m_putpicture2();
extern void m_getcpicture();
extern void m_putcpicture();
extern void m_putcpicture2();
extern void m_xorcpicture();
extern void m_setcpicture();
extern void m_disposepicture();
extern void m_bunny();
extern void m_hscroll();
extern void m_vscroll();
extern void m_blit();
extern void m_loadfont();
extern void m_drawchar();
extern void m_displaytext();
extern void m_drawstr();
extern void m_centerstr();
extern void m_rightstr();
extern long m_strwidth();
extern long m_strlength();
extern void m_setfont();
#define m_choosefont(x)
/*  extern void m_choosefont();  */
extern void m_seefont();
extern void m_makechar();
extern void m_changechar();
extern void m_copychar();
extern void m_disposechar();
extern void m_loadcfont();
extern void m_drawcchar();
extern void m_xorcchar();
extern void m_drawcchar2();
extern void m_xorcchar2();
extern void m_makecchar();
extern void m_changecchar();
extern void m_copycchar();
extern void m_disposecchar();
extern void m_getcchar();
extern void m_graphics_on();
extern void m_alpha_on();

#define m_graphics_off()
#define m_alpha_off()

extern void m_readpen();
extern void m_trackpen();
extern void m_clipxy();
extern boolean m_pollkbd();
extern uchar m_inkey();
extern uchar m_inkeyn();
extern uchar m_testkey();


#undef vextern

#endif /*MYLIB_H*/

/* End. */

